<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int numMothers = 1;
const int numGirls = 2;
const int numFathers = 1;
const int numBoys = 2;
const int numPolice = 1;
const int numThiefs = 1;

bool boatSide = false;
bool boatSailing = false;

bool motherSide[numMothers];
bool girlSide[numGirls];

bool fatherSide[numFathers];
bool boySide[numBoys];

bool policeSide[numPolice];
bool thiefSide[numThiefs];



chan sail_control, sail_passenger;


</declaration>
	<template>
		<name x="5" y="5">Boat</name>
		<declaration>// Place local declarations here.

</declaration>
		<location id="id0" x="-442" y="-493">
			<name x="-452" y="-527">Sailing</name>
			<committed/>
		</location>
		<location id="id1" x="-578" y="-493">
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-442" y="-476">boatSide = !boatSide, boatSailing = false</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-646" y="-442">sail_passenger?</label>
			<label kind="assignment" x="-646" y="-425">boatSide = !boatSide, boatSailing = false</label>
			<nail x="-510" y="-450"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-552" y="-586">sail_control?</label>
			<label kind="assignment" x="-493" y="-561">boatSailing = true</label>
			<nail x="-518" y="-544"/>
		</transition>
	</template>
	<template>
		<name>Mother</name>
		<parameter>int id</parameter>
		<declaration>bool aloneWithBoys(){
    int i;
    for (i = 0 ; i &lt; numFathers ; i++){
        if (fatherSide[i] == motherSide[id]){
            return false;
        }
    }
    for (i = 0 ; i &lt; numBoys ; i++){
        if (boySide[i] == motherSide[id]){
             return true;  
        }
    }
    return false;
}

</declaration>
		<location id="id2" x="-197" y="-37">
			<label kind="invariant" x="-255" y="8">!aloneWithBoys() || boatSailing</label>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="-51" y="-85">motherSide[id] == boatSide</label>
			<label kind="synchronisation" x="-51" y="-68">sail_passenger!</label>
			<label kind="assignment" x="-51" y="-51">motherSide[id] = !motherSide[id]</label>
			<nail x="-85" y="-76"/>
			<nail x="-85" y="-8"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="-569" y="-75">motherSide[id] == boatSide</label>
			<label kind="synchronisation" x="-569" y="-58">sail_control!</label>
			<label kind="assignment" x="-569" y="-41">motherSide[id] = !motherSide[id]</label>
			<nail x="-306" y="0"/>
			<nail x="-306" y="-68"/>
		</transition>
	</template>
	<template>
		<name>Father</name>
		<parameter>int id</parameter>
		<declaration>bool aloneWithGirls(){
    int i;
    for (i = 0 ; i &lt; numMothers ; i++){
        if (motherSide[i] == fatherSide[id]){
            return false;
        }
    }
    for (i = 0 ; i &lt; numGirls ; i++){
        if (girlSide[i] == fatherSide[id]){
             return true;  
        }
    }
    return false;
}

</declaration>
		<location id="id3" x="-306" y="-221">
			<label kind="invariant" x="-364" y="-176">!aloneWithGirls() || boatSailing</label>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="-160" y="-269">fatherSide[id] == boatSide</label>
			<label kind="synchronisation" x="-160" y="-252">sail_passenger!</label>
			<label kind="assignment" x="-160" y="-235">fatherSide[id] = !fatherSide[id]</label>
			<nail x="-194" y="-260"/>
			<nail x="-194" y="-192"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="-678" y="-259">fatherSide[id] == boatSide</label>
			<label kind="synchronisation" x="-678" y="-242">sail_control!</label>
			<label kind="assignment" x="-678" y="-225">fatherSide[id] = !fatherSide[id]</label>
			<nail x="-415" y="-184"/>
			<nail x="-415" y="-252"/>
		</transition>
	</template>
	<template>
		<name>PoliceOfficer</name>
		<parameter>int id</parameter>
		<location id="id4" x="-306" y="-221">
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="-160" y="-269">policeSide[id] == boatSide</label>
			<label kind="synchronisation" x="-160" y="-252">sail_passenger!</label>
			<label kind="assignment" x="-160" y="-235">policeSide[id] = !policeSide[id]</label>
			<nail x="-194" y="-260"/>
			<nail x="-194" y="-192"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="guard" x="-678" y="-259">policeSide[id] == boatSide</label>
			<label kind="synchronisation" x="-678" y="-242">sail_control!</label>
			<label kind="assignment" x="-678" y="-225">policeSide[id] = !policeSide[id]</label>
			<nail x="-415" y="-184"/>
			<nail x="-415" y="-252"/>
		</transition>
	</template>
	<template>
		<name>Girl</name>
		<parameter>int id</parameter>
		<location id="id5" x="-212" y="-289">
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="guard" x="-66" y="-337">girlSide[id] == boatSide</label>
			<label kind="synchronisation" x="-66" y="-320">sail_passenger!</label>
			<label kind="assignment" x="-66" y="-303">girlSide[id] = !girlSide[id]</label>
			<nail x="-100" y="-328"/>
			<nail x="-100" y="-260"/>
		</transition>
	</template>
	<template>
		<name>Boy</name>
		<parameter>int id</parameter>
		<location id="id6" x="-212" y="-289">
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="guard" x="-66" y="-337">boySide[id] == boatSide</label>
			<label kind="synchronisation" x="-66" y="-320">sail_passenger!</label>
			<label kind="assignment" x="-66" y="-303">boySide[id] = !boySide[id]</label>
			<nail x="-100" y="-328"/>
			<nail x="-100" y="-260"/>
		</transition>
	</template>
	<template>
		<name>Thief</name>
		<parameter>int id</parameter>
		<declaration>bool aloneWithFamily(){
    int i;
    for (i = 0; i &lt; numPolice ; i++){
        if (policeSide[i] &amp;&amp; thiefSide[id]){
            return false;
        }
    }
    for (i = 0; i &lt; numMothers ; i++){
        if (motherSide[i] &amp;&amp; thiefSide[id]){
            return true;
        }
    }
    for (i = 0; i &lt; numFathers ; i++){
        if (fatherSide[i] &amp;&amp; thiefSide[id]){
            return true;
        }
    }
    for (i = 0; i &lt; numGirls ; i++){
        if (girlSide[i] &amp;&amp; thiefSide[id]){
            return true;
        }
    }
    for (i = 0; i &lt; numBoys ; i++){
        if (boySide[i] &amp;&amp; thiefSide[id]){
            return true;
        }
    }
    return false;
}</declaration>
		<location id="id7" x="-170" y="-195">
			<label kind="invariant" x="-212" y="-161">!aloneWithFamily() || boatSailing</label>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="guard" x="-24" y="-243">thiefSide[id] == boatSide</label>
			<label kind="synchronisation" x="-24" y="-226">sail_passenger!</label>
			<label kind="assignment" x="-24" y="-209">thiefSide[id] = !thiefSide[id]</label>
			<nail x="-58" y="-234"/>
			<nail x="-58" y="-166"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
boat = Boat();
mother = Mother(0);
father = Father(0);
girl1 = Girl(0);
girl2 = Girl(1);
boy1 = Boy(0);
boy2 = Boy(1);
police = PoliceOfficer(0);
thief = Thief(0);

// List one or more processes to be composed into a system.
system boat, mother, father, girl1, girl2, boy1, boy2, police, thief;</system>
</nta>
